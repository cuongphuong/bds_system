/*!
 * Virtual Select v1.0.9
 * https://sa-si-dev.github.io/virtual-select
 * Licensed under MIT (https://github.com/sa-si-dev/virtual-select/blob/master/LICENSE)
 */
! function() {
    "use strict";

    function t(t) {
        return function(t) {
            if (Array.isArray(t)) return e(t)
        }(t) || function(t) {
            if ("undefined" != typeof Symbol && Symbol.iterator in Object(t)) return Array.from(t)
        }(t) || function(t, i) {
            if (!t) return;
            if ("string" == typeof t) return e(t, i);
            var o = Object.prototype.toString.call(t).slice(8, -1);
            "Object" === o && t.constructor && (o = t.constructor.name);
            if ("Map" === o || "Set" === o) return Array.from(t);
            if ("Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)) return e(t, i)
        }(t) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
        }()
    }

    function e(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for (var i = 0, o = new Array(e); i < e; i++) o[i] = t[i];
        return o
    }

    function i(t) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
            return typeof t
        } : function(t) {
            return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
        })(t)
    }

    function o(t, e) {
        for (var i = 0; i < e.length; i++) {
            var o = e[i];
            o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(t, o.key, o)
        }
    }
    var s = function() {
        function e() {
            ! function(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
            }(this, e)
        }
        var s, n, l;
        return s = e, l = [{
            key: "getString",
            value: function(t) {
                return t || 0 === t ? t.toString() : ""
            }
        }, {
            key: "convertToBoolean",
            value: function(t) {
                var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                return t = !0 === t || "true" === t || !1 !== t && "false" !== t && e
            }
        }, {
            key: "isEmpty",
            value: function(t) {
                var e = !1;
                return t ? Array.isArray(t) ? 0 === t.length && (e = !0) : "object" === i(t) && 0 === Object.keys(t).length && (e = !0) : e = !0, e
            }
        }, {
            key: "isNotEmpty",
            value: function(t) {
                return !this.isEmpty(t)
            }
        }, {
            key: "removeItemFromArray",
            value: function(e, i, o) {
                if (!Array.isArray(e) || !e.length || !i) return e;
                o && (e = t(e));
                var s = e.indexOf(i);
                return -1 !== s && e.splice(s, 1), e
            }
        }, {
            key: "removeArrayEmpty",
            value: function(t) {
                return Array.isArray(t) && t.length ? t.filter((function(t) {
                    return !!t
                })) : []
            }
        }], (n = null) && o(s.prototype, n), l && o(s, l), e
    }();

    function n(t) {
        return function(t) {
            if (Array.isArray(t)) return l(t)
        }(t) || function(t) {
            if ("undefined" != typeof Symbol && Symbol.iterator in Object(t)) return Array.from(t)
        }(t) || function(t, e) {
            if (!t) return;
            if ("string" == typeof t) return l(t, e);
            var i = Object.prototype.toString.call(t).slice(8, -1);
            "Object" === i && t.constructor && (i = t.constructor.name);
            if ("Map" === i || "Set" === i) return Array.from(t);
            if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return l(t, e)
        }(t) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
        }()
    }

    function l(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for (var i = 0, o = new Array(e); i < e; i++) o[i] = t[i];
        return o
    }

    function a(t, e) {
        for (var i = 0; i < e.length; i++) {
            var o = e[i];
            o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(t, o.key, o)
        }
    }
    var r = function() {
        function t() {
            ! function(t, e) {
                if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
            }(this, t)
        }
        var e, i, o;
        return e = t, o = [{
            key: "addClass",
            value: function(e, i) {
                e && (i = i.split(" "), t.getElements(e).forEach((function(t) {
                    var e;
                    (e = t.classList).add.apply(e, n(i))
                })))
            }
        }, {
            key: "removeClass",
            value: function(e, i) {
                e && (i = i.split(" "), t.getElements(e).forEach((function(t) {
                    var e;
                    (e = t.classList).remove.apply(e, n(i))
                })))
            }
        }, {
            key: "toggleClass",
            value: function(e, i, o) {
                var s;
                if (e) return void 0 !== o && (o = Boolean(o)), t.getElements(e).forEach((function(t) {
                    s = t.classList.toggle(i, o)
                })), s
            }
        }, {
            key: "hasClass",
            value: function(t, e) {
                return !!t && t.classList.contains(e)
            }
        }, {
            key: "hasEllipsis",
            value: function(t) {
                return !!t && t.scrollWidth > t.offsetWidth
            }
        }, {
            key: "getMoreVisibleSides",
            value: function(t) {
                if (!t) return {};
                var e = t.getBoundingClientRect(),
                    i = window.innerWidth,
                    o = window.innerHeight,
                    s = e.left,
                    n = e.top;
                return {
                    horizontal: s > i - s - e.width ? "left" : "right",
                    vertical: n > o - n - e.height ? "top" : "bottom"
                }
            }
        }, {
            key: "getData",
            value: function(t, e, i) {
                if (t) {
                    var o = t ? t.dataset[e] : "";
                    return "number" === i ? o = parseFloat(o) || 0 : "true" === o ? o = !0 : "false" === o && (o = !1), o
                }
            }
        }, {
            key: "setData",
            value: function(t, e, i) {
                t && (t.dataset[e] = i)
            }
        }, {
            key: "setStyle",
            value: function(t, e, i) {
                t && (t.style[e] = i)
            }
        }, {
            key: "getElements",
            value: function(t) {
                if (t) return void 0 === t.forEach && (t = [t]), t
            }
        }, {
            key: "addEvent",
            value: function(e, i, o) {
                e && (i = s.removeArrayEmpty(i.split(" "))).forEach((function(i) {
                    (e = t.getElements(e)).forEach((function(t) {
                        t.addEventListener(i, o)
                    }))
                }))
            }
        }, {
            key: "dispatchEvent",
            value: function(e, i) {
                e && (e = t.getElements(e), setTimeout((function() {
                    e.forEach((function(t) {
                        t.dispatchEvent(new Event(i, {
                            bubbles: !0
                        }))
                    }))
                }), 0))
            }
        }, {
            key: "getStyleText",
            value: function(t, e) {
                var i = "";
                for (var o in t) i += "".concat(o, ": ").concat(t[o], ";");
                return i && !e && (i = 'style="'.concat(i, '"')), i
            }
        }, {
            key: "getAttributesText",
            value: function(t) {
                var e = "";
                if (!t) return e;
                for (var i in t) {
                    var o = t[i];
                    void 0 !== o && (e += " ".concat(i, '="').concat(o, '" '))
                }
                return e
            }
        }], (i = null) && a(e.prototype, i), o && a(e, o), t
    }();

    function u(t, e, i) {
        return e in t ? Object.defineProperty(t, e, {
            value: i,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = i, t
    }

    function c(t, e) {
        var i;
        if ("undefined" == typeof Symbol || null == t[Symbol.iterator]) {
            if (Array.isArray(t) || (i = p(t)) || e && t && "number" == typeof t.length) {
                i && (t = i);
                var o = 0,
                    s = function() {};
                return {
                    s: s,
                    n: function() {
                        return o >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[o++]
                        }
                    },
                    e: function(t) {
                        throw t
                    },
                    f: s
                }
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
        }
        var n, l = !0,
            a = !1;
        return {
            s: function() {
                i = t[Symbol.iterator]()
            },
            n: function() {
                var t = i.next();
                return l = t.done, t
            },
            e: function(t) {
                a = !0, n = t
            },
            f: function() {
                try {
                    l || null == i.return || i.return()
                } finally {
                    if (a) throw n
                }
            }
        }
    }

    function h(t) {
        return function(t) {
            if (Array.isArray(t)) return d(t)
        }(t) || function(t) {
            if ("undefined" != typeof Symbol && Symbol.iterator in Object(t)) return Array.from(t)
        }(t) || p(t) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
        }()
    }

    function p(t, e) {
        if (t) {
            if ("string" == typeof t) return d(t, e);
            var i = Object.prototype.toString.call(t).slice(8, -1);
            return "Object" === i && t.constructor && (i = t.constructor.name), "Map" === i || "Set" === i ? Array.from(t) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? d(t, e) : void 0
        }
    }

    function d(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for (var i = 0, o = new Array(e); i < e; i++) o[i] = t[i];
        return o
    }

    function v(t, e) {
        for (var i = 0; i < e.length; i++) {
            var o = e[i];
            o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(t, o.key, o)
        }
    }
    var f = {
            13: "onEnterPress",
            27: "onEscPress",
            38: "onUpArrowPress",
            40: "onDownArrowPress"
        },
        y = function() {
            function t(e) {
                ! function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
                }(this, t);
                try {
                    this.setProps(e), this.setDisabledOptions(e.disabledOptions), this.setOptions(e.options), this.render()
                } catch (t) {
                    console.warn("Couldn't initiate Virtual Select"), console.error(t)
                }
            }
            var e, i, o;
            return e = t, o = [{
                key: "init",
                value: function(e) {
                    var i = e.ele;
                    if (i) {
                        var o = !1;
                        if ("string" != typeof i || (i = document.querySelector(i))) {
                            void 0 === i.length && (i = [i], o = !0);
                            var s = [];
                            return i.forEach((function(i) {
                                e.ele = i, s.push(new t(e))
                            })), o ? s[0] : s
                        }
                    }
                }
            }, {
                key: "resetForm",
                value: function(t) {
                    var e = t.target.closest("form");
                    e && e.querySelectorAll(".vscomp-wrapper").forEach((function(t) {
                        t.parentElement.virtualSelect.reset()
                    }))
                }
            }, {
                key: "reset",
                value: function() {
                    this.virtualSelect.reset()
                }
            }, {
                key: "setValueMethod",
                value: function(t, e) {
                    this.virtualSelect.setValueMethod(t, e)
                }
            }, {
                key: "setOptionsMethod",
                value: function(t) {
                    this.virtualSelect.setOptionsMethod(t)
                }
            }, {
                key: "setDisabledOptionsMethod",
                value: function(t) {
                    this.virtualSelect.setDisabledOptionsMethod(t)
                }
            }, {
                key: "toggleSelectAll",
                value: function(t) {
                    this.virtualSelect.toggleAllOptions(t)
                }
            }, {
                key: "isAllSelected",
                value: function() {
                    return this.virtualSelect.isAllSelected
                }
            }, {
                key: "addOptionMethod",
                value: function(t) {
                    this.virtualSelect.addOption(t, !0)
                }
            }, {
                key: "getNewValueMethod",
                value: function() {
                    return this.virtualSelect.getNewValue()
                }
            }, {
                key: "version",
                value: function() {
                    return "v1.0.7"
                }
            }, {
                key: "getDisplayValueMethod",
                value: function() {
                    return this.virtualSelect.getDisplayValue()
                }
            }, {
                key: "getSelectedOptionsMethod",
                value: function() {
                    return this.virtualSelect.getSelectedOptions()
                }
            }, {
                key: "openMethod",
                value: function() {
                    return this.virtualSelect.openDropbox()
                }
            }, {
                key: "closeMethod",
                value: function() {
                    return this.virtualSelect.closeDropbox()
                }
            }, {
                key: "onResizeMethod",
                value: function() {
                    document.querySelectorAll(".vscomp-wrapper").forEach((function(t) {
                        t.parentElement.virtualSelect.onResize()
                    }))
                }
            }], (i = [{
                key: "render",
                value: function() {
                    if (this.$ele) {
                        var t = "vscomp-wrapper",
                            e = this.getTooltipAttrText("", !this.multiple, !0),
                            i = this.getTooltipAttrText(this.clearButtonText),
                            o = {
                                "z-index": this.zIndex
                            };
                        this.additionalClasses && (t += " " + this.additionalClasses), this.multiple && (t += " multiple", this.disableSelectAll || (t += " has-select-all")), "top" === this.position && (t += " position-top"), this.hideClearButton || (t += " has-clear-button"), this.keepAlwaysOpen ? t += " keep-always-open opened" : t += " closed", this.showAsPopup ? t += " show-as-popup" : this.dropboxWidth && (o.width = this.dropboxWidth), this.hasSearch && (t += " has-search-input");
                        var s = '<div class="'.concat(t, '" tabindex="0">\n        <input type="hidden" name="').concat(this.name, '" class="vscomp-hidden-input">\n\n        <div class="vscomp-toggle-button">\n          <div class="vscomp-value" ').concat(e, ">\n            ").concat(this.placeholder, '\n          </div>\n\n          <div class="vscomp-arrow"></div>\n\n          <div class="vscomp-clear-button toggle-button-child" ').concat(i, '>\n            <i class="vscomp-clear-icon"></i>\n          </div>\n        </div>\n\n        <div class="vscomp-dropbox-container" ').concat(r.getStyleText(o), '>\n          <div class="vscomp-dropbox">\n            <div class="vscomp-search-wrapper"></div>\n\n            <div class="vscomp-options-container">\n              <div class="vscomp-options-loader"></div>\n\n              <div class="vscomp-options-list">\n                <div class="vscomp-options"></div>\n              </div>\n            </div>\n\n            <div class="vscomp-no-options">').concat(this.noOptionsText, '</div>\n            <div class="vscomp-no-search-results">').concat(this.noSearchResultsText, '</div>\n\n            <span class="vscomp-dropbox-close-button"><i class="vscomp-clear-icon"></i></span>\n          </div>\n        </div>\n      </div>');
                        this.$ele.innerHTML = s, this.$body = document.querySelector("body"), this.$wrapper = this.$ele.querySelector(".vscomp-wrapper"), this.$toggleButton = this.$ele.querySelector(".vscomp-toggle-button"), this.$clearButton = this.$ele.querySelector(".vscomp-clear-button"), this.$dropboxContainer = this.$ele.querySelector(".vscomp-dropbox-container"), this.$dropboxCloseButton = this.$ele.querySelector(".vscomp-dropbox-close-button"), this.$search = this.$ele.querySelector(".vscomp-search-wrapper"), this.$optionsContainer = this.$ele.querySelector(".vscomp-options-container"), this.$optionsList = this.$ele.querySelector(".vscomp-options-list"), this.$options = this.$ele.querySelector(".vscomp-options"), this.$valueText = this.$ele.querySelector(".vscomp-value"), this.$hiddenInput = this.$ele.querySelector(".vscomp-hidden-input"), this.$noOptions = this.$ele.querySelector(".vscomp-no-options"), this.$noSearchResults = this.$ele.querySelector(".vscomp-no-search-results"), this.afterRenderWrapper()
                    }
                }
            }, {
                key: "renderOptions",
                value: function() {
                    var t, e = this,
                        i = "",
                        o = this.getVisibleOptions(),
                        s = "",
                        n = "",
                        l = !(!this.markSearchResults || !this.searchValue),
                        a = r.getStyleText({
                            height: this.optionHeight + "px"
                        });
                    if (l && (t = new RegExp("(".concat(this.searchValue, ")"), "gi")), this.multiple && (s = '<span class="checkbox-icon"></span>'), this.allowNewOption) {
                        var u = this.getTooltipAttrText("New Option");
                        n = '<span class="vscomp-new-option-icon" '.concat(u, "></span>")
                    }
                    o.forEach((function(o) {
                        var r = o.label,
                            u = "vscomp-option",
                            c = e.getTooltipAttrText("", !0),
                            h = s,
                            p = "",
                            d = "";
                        o.isFocused && (u += " focused"), o.isDisabled && (u += " disabled"), o.isGroupTitle ? (u += " group-title", h = "") : o.isSelected && (u += " selected"), o.isGroupOption && (u += " group-option"), o.description && (d = '<div class="vscomp-option-description" '.concat(c, ">").concat(o.description, "</div>")), o.isCurrentNew ? (u += " current-new", p += n) : l && !o.isGroupTitle && (r = r.replace(t, "<mark>$1</mark>")), i += '<div class="'.concat(u, '" data-value="').concat(o.value, '" data-index="').concat(o.index, '" data-visible-index="').concat(o.visibleIndex, '" ').concat(a, ">\n          ").concat(h, '\n          <span class="vscomp-option-text" ').concat(c, ">\n            ").concat(r, "\n          </span>\n          ").concat(d, "\n          ").concat(p, "\n        </div>")
                    })), this.$options.innerHTML = i;
                    var c = !this.options.length && !this.hasServerSearch,
                        h = !c && !o.length;
                    (!this.allowNewOption || this.hasServerSearch || this.showOptionsOnlyOnSearch) && r.toggleClass(this.$wrapper, "has-no-search-results", h), r.toggleClass(this.$wrapper, "has-no-options", c), this.setOptionsPosition(), this.setOptionsTooltip()
                }
            }, {
                key: "renderSearch",
                value: function() {
                    if (this.hasSearchContainer) {
                        var t = "",
                            e = "";
                        this.multiple && !this.disableSelectAll && (t = '<span class="vscomp-toggle-all-button">\n          <span class="checkbox-icon vscomp-toggle-all-checkbox"></span>\n          <span class="vscomp-toggle-all-label">'.concat(this.selectAllText, "</span>\n        </span>")), this.hasSearch && (e = '<input type="text" class="vscomp-search-input" placeholder="'.concat(this.searchPlaceholderText, '">\n      <span class="vscomp-search-clear">&times;</span>'));
                        var i = '<div class="vscomp-search-container">\n        '.concat(t, "\n        ").concat(e, "\n      </div>");
                        this.$search.innerHTML = i, this.$searchInput = this.$ele.querySelector(".vscomp-search-input"), this.$searchClear = this.$ele.querySelector(".vscomp-search-clear"), this.$toggleAllButton = this.$ele.querySelector(".vscomp-toggle-all-button"), this.$toggleAllCheckbox = this.$ele.querySelector(".vscomp-toggle-all-checkbox"), this.addEvent(this.$searchInput, "keyup change", "onSearch"), this.addEvent(this.$searchClear, "click", "onSearchClear"), this.addEvent(this.$toggleAllButton, "click", "onToggleAllOptions")
                    }
                }
            }, {
                key: "addEvents",
                value: function() {
                    this.addEvent(document, "click", "onDocumentClick"), this.addEvent(this.$wrapper, "keydown", "onKeyDown"), this.addEvent(this.$toggleButton, "click", "onToggleButtonClick"), this.addEvent(this.$clearButton, "click", "onClearButtonClick"), this.addEvent(this.$dropboxContainer, "click", "onDropboxContainerClick"), this.addEvent(this.$dropboxCloseButton, "click", "onDropboxCloseButtonClick"), this.addEvent(this.$optionsContainer, "scroll", "onOptionsScroll"), this.addEvent(this.$options, "click", "onOptionsClick"), this.addEvent(this.$options, "mouseover", "onOptionsMouseOver"), this.addEvent(this.$options, "touchmove", "onOptionsTouchMove")
                }
            }, {
                key: "addEvent",
                value: function(t, e, i) {
                    var o = this;
                    t && (e = s.removeArrayEmpty(e.split(" "))).forEach((function(e) {
                        var s = "".concat(i, "-").concat(e),
                            n = o.events[s];
                        n || (n = o[i].bind(o), o.events[s] = n), r.addEvent(t, e, n)
                    }))
                }
            }, {
                key: "onDocumentClick",
                value: function(t) {
                    t.target.closest(".vscomp-wrapper") !== this.$wrapper && this.closeDropbox()
                }
            }, {
                key: "onKeyDown",
                value: function(t) {
                    var e = t.which || t.keyCode,
                        i = f[e];
                    i && this[i](t)
                }
            }, {
                key: "onEnterPress",
                value: function() {
                    this.isOpened() ? this.selectFocusedOption() : this.openDropbox()
                }
            }, {
                key: "onEscPress",
                value: function() {
                    this.isOpened() && this.closeDropbox()
                }
            }, {
                key: "onDownArrowPress",
                value: function(t) {
                    t.preventDefault(), this.isOpened() ? this.focusOption("next") : this.openDropbox()
                }
            }, {
                key: "onUpArrowPress",
                value: function(t) {
                    t.preventDefault(), this.isOpened() ? this.focusOption("previous") : this.openDropbox()
                }
            }, {
                key: "onToggleButtonClick",
                value: function(t) {
                    t.target.closest(".toggle-button-child") || this.toggleDropbox()
                }
            }, {
                key: "onClearButtonClick",
                value: function() {
                    this.reset()
                }
            }, {
                key: "onOptionsScroll",
                value: function() {
                    this.setVisibleOptions()
                }
            }, {
                key: "onOptionsClick",
                value: function(t) {
                    this.selectOption(t.target.closest(".vscomp-option:not(.disabled):not(.group-title)"))
                }
            }, {
                key: "onDropboxContainerClick",
                value: function(t) {
                    t.target.closest(".vscomp-dropbox") || this.closeDropbox()
                }
            }, {
                key: "onDropboxCloseButtonClick",
                value: function() {
                    this.closeDropbox()
                }
            }, {
                key: "onOptionsMouseOver",
                value: function(t) {
                    var e = t.target.closest(".vscomp-option:not(.disabled):not(.group-title)");
                    e && this.isOpened() && this.focusOption(null, e)
                }
            }, {
                key: "onOptionsTouchMove",
                value: function() {
                    this.removeOptionFocus()
                }
            }, {
                key: "onSearch",
                value: function(t) {
                    t.stopPropagation(), this.setSearchValue(t.target.value, !0)
                }
            }, {
                key: "onSearchClear",
                value: function() {
                    this.setSearchValue(""), this.focusSearchInput()
                }
            }, {
                key: "onToggleAllOptions",
                value: function() {
                    this.toggleAllOptions()
                }
            }, {
                key: "onResize",
                value: function() {
                    this.setOptionsContainerHeight(!0)
                }
            }, {
                key: "beforeValueSet",
                value: function(t) {
                    this.toggleAllOptionsClass(!t && void 0)
                }
            }, {
                key: "beforeSelectNewValue",
                value: function() {
                    var t = this,
                        e = this.getNewOption(),
                        i = e.index;
                    this.newValues.push(e.value), this.setOptionProp(i, "isCurrentNew", !1), this.setOptionProp(i, "isNew", !0), setTimeout((function() {
                        t.setSearchValue(""), t.focusSearchInput()
                    }), 0)
                }
            }, {
                key: "afterRenderWrapper",
                value: function() {
                    this.$ele.setAttribute("name", this.name), r.addClass(this.$ele, "vscomp-ele"), this.renderSearch(), this.setOptionsHeight(), this.setVisibleOptions(), this.setOptionsContainerHeight(), this.addEvents(), this.setMethods(), this.initialSelectedValue ? this.setValueMethod(this.initialSelectedValue, this.silentInitialValueSet) : this.autoSelectFirstOption && this.visibleOptions.length && this.setValueMethod(this.visibleOptions[0].value, this.silentInitialValueSet), this.showOptionsOnlyOnSearch && this.setSearchValue("", !1, !0)
                }
            }, {
                key: "afterSetOptionsContainerHeight",
                value: function(t) {
                    t && this.showAsPopup && this.setVisibleOptions()
                }
            }, {
                key: "afterSetSearchValue",
                value: function() {
                    this.hasServerSearch ? this.serverSearch() : this.setVisibleOptionsCount()
                }
            }, {
                key: "afterSetVisibleOptionsCount",
                value: function() {
                    this.scrollToTop(), this.setOptionsHeight(), this.setVisibleOptions()
                }
            }, {
                key: "afterValueSet",
                value: function() {
                    this.scrollToTop(), this.setSearchValue(""), this.renderOptions()
                }
            }, {
                key: "afterSetOptions",
                value: function(t) {
                    t && this.setSelectedProp(), this.setOptionsHeight(), this.setVisibleOptions(), this.showOptionsOnlyOnSearch && this.setSearchValue("", !1, !0), t || this.reset()
                }
            }, {
                key: "setProps",
                value: function(t) {
                    t = this.setDefaultProps(t), this.setPropsFromElementAttr(t);
                    var e = s.convertToBoolean;
                    this.$ele = t.ele, this.valueKey = t.valueKey, this.labelKey = t.labelKey, this.descriptionKey = t.descriptionKey, this.aliasKey = t.aliasKey, this.optionHeightText = t.optionHeight, this.optionHeight = parseFloat(this.optionHeightText), this.multiple = e(t.multiple), this.hasSearch = e(t.search), this.hideClearButton = e(t.hideClearButton), this.autoSelectFirstOption = e(t.autoSelectFirstOption), this.hasOptionDescription = e(t.hasOptionDescription), this.silentInitialValueSet = e(t.silentInitialValueSet), this.allowNewOption = e(t.allowNewOption), this.markSearchResults = e(t.markSearchResults), this.showSelectedOptionsFirst = e(t.showSelectedOptionsFirst), this.disableSelectAll = e(t.disableSelectAll), this.keepAlwaysOpen = e(t.keepAlwaysOpen), this.showDropboxAsPopup = e(t.showDropboxAsPopup), this.hideValueTooltipOnSelectAll = e(t.hideValueTooltipOnSelectAll), this.showOptionsOnlyOnSearch = e(t.showOptionsOnlyOnSearch), this.noOptionsText = t.noOptionsText, this.noSearchResultsText = t.noSearchResultsText, this.selectAllText = t.selectAllText, this.searchPlaceholderText = t.searchPlaceholderText, this.clearButtonText = t.clearButtonText, this.placeholder = t.placeholder, this.position = t.position, this.dropboxWidth = t.dropboxWidth, this.tooltipFontSize = t.tooltipFontSize, this.tooltipAlignment = t.tooltipAlignment, this.tooltipMaxWidth = t.tooltipMaxWidth, this.noOfDisplayValues = parseInt(t.noOfDisplayValues), this.zIndex = parseInt(t.zIndex), this.maxValues = parseInt(t.maxValues), this.name = t.name, this.additionalClasses = t.additionalClasses, this.popupDropboxBreakpoint = t.popupDropboxBreakpoint, this.onServerSearch = t.onServerSearch, this.initialSelectedValue = 0 === t.selectedValue ? "0" : t.selectedValue, this.selectedValues = [], this.selectedOptions = [], this.newValues = [], this.events = {}, this.tooltipEnterDelay = 200, this.transitionDuration = 250, this.searchValue = "", this.searchValueOriginal = "", this.isAllSelected = !1, (void 0 === t.search && this.multiple || this.allowNewOption || this.showOptionsOnlyOnSearch) && (this.hasSearch = !0), this.hasServerSearch = "function" == typeof this.onServerSearch, (this.maxValues || this.hasServerSearch || this.showOptionsOnlyOnSearch) && (this.disableSelectAll = !0), this.showAsPopup = this.showDropboxAsPopup && !this.keepAlwaysOpen && window.innerWidth <= parseFloat(this.popupDropboxBreakpoint), this.hasSearchContainer = this.hasSearch || this.multiple && !this.disableSelectAll, this.optionsCount = this.getOptionsCount(t.optionsCount), this.halfOptionsCount = Math.ceil(this.optionsCount / 2), this.optionsHeight = this.getOptionsHeight()
                }
            }, {
                key: "setDefaultProps",
                value: function(t) {
                    var e = {
                        valueKey: "value",
                        labelKey: "label",
                        descriptionKey: "description",
                        aliasKey: "alias",
                        optionsCount: 5,
                        noOfDisplayValues: 50,
                        optionHeight: "40px",
                        multiple: !1,
                        hideClearButton: !1,
                        autoSelectFirstOption: !1,
                        hasOptionDescription: !1,
                        silentInitialValueSet: !1,
                        disableSelectAll: !1,
                        noOptionsText: "Không có dữ liệu",
                        noSearchResultsText: "Không có dữ liệu",
                        selectAllText: "Chọn tất cả",
                        searchPlaceholderText: "Tìm kiếm...",
                        clearButtonText: "Xóa",
                        placeholder: "Tất cả",
                        position: "auto",
                        zIndex: 1,
                        allowNewOption: !1,
                        markSearchResults: !1,
                        tooltipFontSize: "14px",
                        tooltipAlignment: "center",
                        tooltipMaxWidth: "300px",
                        showSelectedOptionsFirst: !1,
                        name: "",
                        additionalClasses: "",
                        keepAlwaysOpen: !1,
                        maxValues: 0,
                        showDropboxAsPopup: !0,
                        popupDropboxBreakpoint: "576px",
                        hideValueTooltipOnSelectAll: !0,
                        showOptionsOnlyOnSearch: !1
                    };
                    return t.hasOptionDescription && (e.optionsCount = 4, e.optionHeight = "60px"), Object.assign(e, t)
                }
            }, {
                key: "setPropsFromElementAttr",
                value: function(t) {
                    var e = t.ele,
                        i = {
                            multiple: "multiple",
                            placeholder: "placeholder",
                            name: "name",
                            "data-value-key": "valueKey",
                            "data-label-key": "labelKey",
                            "data-description-key": "descriptionKey",
                            "data-alias-key": "aliasKey",
                            "data-search": "search",
                            "data-hide-clear-button": "hideClearButton",
                            "data-auto-select-first-option": "autoSelectFirstOption",
                            "data-has-option-description": "hasOptionDescription",
                            "data-options-count": "optionsCount",
                            "data-option-height": "optionHeight",
                            "data-position": "position",
                            "data-no-options-text": "noOptionsText",
                            "data-no-search-results-text": "noSearchResultsText",
                            "data-select-all-text": "selectAllText",
                            "data-search-placeholder-text": "searchPlaceholderText",
                            "data-clear-button-text": "clearButtonText",
                            "data-silent-initial-value-set": "silentInitialValueSet",
                            "data-dropbox-width": "dropboxWidth",
                            "data-z-index": "zIndex",
                            "data-no-of-display-values": "noOfDisplayValues",
                            "data-allow-new-option": "allowNewOption",
                            "data-mark-search-results": "markSearchResults",
                            "data-tooltip-font-size": "tooltipFontSize",
                            "data-tooltip-alignment": "tooltipAlignment",
                            "data-tooltip-max-width": "tooltipMaxWidth",
                            "data-show-selected-options-first": "showSelectedOptionsFirst",
                            "data-disable-select-all": "disableSelectAll",
                            "data-keep-always-open": "keepAlwaysOpen",
                            "data-max-values": "maxValues",
                            "data-additional-classes": "additionalClasses",
                            "data-show-dropbox-as-popup": "showDropboxAsPopup",
                            "data-popup-dropbox-breakpoint": "popupDropboxBreakpoint",
                            "data-hide-value-tooltip-on-select-all": "hideValueTooltipOnSelectAll",
                            "data-show-options-only-on-search": "showOptionsOnlyOnSearch"
                        };
                    for (var o in i) {
                        var s = e.getAttribute(o);
                        "multiple" !== o || "" !== s && "true" !== s || (s = !0), s && (t[i[o]] = s)
                    }
                }
            }, {
                key: "setMethods",
                value: function() {
                    var e = this.$ele;
                    e.virtualSelect = this, e.value = this.multiple ? [] : "", e.reset = t.reset, e.setValue = t.setValueMethod, e.setOptions = t.setOptionsMethod, e.setDisabledOptions = t.setDisabledOptionsMethod, e.toggleSelectAll = t.toggleSelectAll, e.isAllSelected = t.isAllSelected, e.addOption = t.addOptionMethod, e.getNewValue = t.getNewValueMethod, e.getDisplayValue = t.getDisplayValueMethod, e.getSelectedOptions = t.getSelectedOptionsMethod, e.open = t.openMethod, e.close = t.closeMethod
                }
            }, {
                key: "setValueMethod",
                value: function(t, e) {
                    Array.isArray(t) || (t = [t]), t = t.map((function(t) {
                        return t || 0 == t ? t.toString() : ""
                    }));
                    var i = [];
                    this.allowNewOption && t && this.setNewOptionsFromValue(t), this.options.forEach((function(e) {
                        -1 === t.indexOf(e.value) || e.isDisabled || e.isGroupTitle ? e.isSelected = !1 : (e.isSelected = !0, i.push(e.value))
                    })), this.multiple || (i = i[0]), this.beforeValueSet(), this.setValue(i, !e), this.afterValueSet()
                }
            }, {
                key: "setOptionsMethod",
                value: function(t, e) {
                    this.setOptions(t), this.afterSetOptions(e)
                }
            }, {
                key: "setDisabledOptionsMethod",
                value: function(t) {
                    this.setDisabledOptions(t, !0), this.setValueMethod(null), this.setVisibleOptions()
                }
            }, {
                key: "setDisabledOptions",
                value: function() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                        e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    t = t.map((function(t) {
                        return t.toString()
                    })), this.disabledOptions = t, e && t.length && this.options.forEach((function(e) {
                        return e.isDisabled = -1 !== t.indexOf(e.value), e
                    }))
                }
            }, {
                key: "setOptions",
                value: function(t) {
                    t || (t = []);
                    var e = [],
                        i = this.disabledOptions,
                        o = i.length,
                        n = this.valueKey,
                        l = this.labelKey,
                        a = this.descriptionKey,
                        r = this.aliasKey,
                        u = this.hasOptionDescription,
                        c = s.getString,
                        h = s.convertToBoolean,
                        p = this.getAlias,
                        d = 0,
                        v = !1;
                    t.forEach((function t(s) {
                        var f = c(s[n]),
                            y = s.options,
                            g = !!y,
                            O = {
                                index: d,
                                value: f,
                                label: c(s[l]),
                                alias: p(s[r]),
                                isVisible: h(s.isVisible, !0),
                                isNew: s.isNew || !1,
                                isGroupTitle: g
                            };
                        if (o && (O.isDisabled = -1 !== i.indexOf(f)), s.isGroupOption && (O.isGroupOption = !0, O.groupIndex = s.groupIndex), u && (O.description = c(s[a])), e.push(O), d++, g) {
                            var b = O.index;
                            v = !0, y.forEach((function(e) {
                                e.isGroupOption = !0, e.groupIndex = b, t(e)
                            }))
                        }
                    })), this.options = e, this.visibleOptionsCount = e.length, this.lastOptionIndex = this.options.length - 1, this.newValues = [], this.hasOptionGroup = v, this.setSortedOptions()
                }
            }, {
                key: "setServerOptions",
                value: function() {
                    var t = this,
                        e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                    this.setOptionsMethod(e, !0);
                    var i = this.selectedOptions,
                        o = this.options,
                        s = !1;
                    if (i.length) {
                        var n = o.map((function(t) {
                            return t.value
                        }));
                        s = !0, i.forEach((function(t) {
                            -1 === n.indexOf(t.value) && (t.isVisible = !1, o.push(t))
                        })), this.setOptionsMethod(o, !0)
                    }
                    if (this.allowNewOption && this.searchValue) {
                        var l = o.some((function(e) {
                            return e.label.toLowerCase() === t.searchValue
                        }));
                        l || (s = !0, this.setNewOption())
                    }
                    s && (this.setVisibleOptionsCount(), this.multiple && this.toggleAllOptionsClass(), this.setValueText()), r.removeClass(this.$wrapper, "server-searching")
                }
            }, {
                key: "setSelectedOptions",
                value: function() {
                    var t = this.selectedValues;
                    this.selectedOptions = this.options.filter((function(e) {
                        return -1 !== t.indexOf(e.value)
                    }))
                }
            }, {
                key: "setSortedOptions",
                value: function() {
                    var t = h(this.options);
                    this.showSelectedOptionsFirst && this.selectedValues.length && (t = this.hasOptionGroup ? this.sortOptionsGroup(t) : this.sortOptions(t)), this.sortedOptions = t
                }
            }, {
                key: "setVisibleOptions",
                value: function() {
                    var t = h(this.sortedOptions),
                        e = 2 * this.optionsCount,
                        i = this.getVisibleStartIndex(),
                        o = this.getNewOption(),
                        s = i + e - 1,
                        n = 0;
                    o && (o.visibleIndex = n, n++), t = t.filter((function(t) {
                        var e = !1;
                        return t.isVisible && !t.isCurrentNew && (e = n >= i && n <= s, t.visibleIndex = n, n++), e
                    })), o && (t = [o].concat(h(t))), this.visibleOptions = t, this.renderOptions()
                }
            }, {
                key: "setOptionsPosition",
                value: function(t) {
                    void 0 === t && (t = this.getVisibleStartIndex());
                    var e = t * this.optionHeight;
                    this.$options.style.transform = "translate3d(0, ".concat(e, "px, 0)"), r.setData(this.$options, "top", e)
                }
            }, {
                key: "setOptionsTooltip",
                value: function() {
                    var t = this,
                        e = this.getVisibleOptions(),
                        i = this.hasOptionDescription;
                    e.forEach((function(e) {
                        var o = t.$dropboxContainer.querySelector('.vscomp-option[data-index="'.concat(e.index, '"]'));
                        r.setData(o.querySelector(".vscomp-option-text"), "tooltip", e.label), i && r.setData(o.querySelector(".vscomp-option-description"), "tooltip", e.description)
                    }))
                }
            }, {
                key: "setValue",
                value: function(t, e) {
                    t ? Array.isArray(t) ? this.selectedValues = h(t) : this.selectedValues = [t] : this.selectedValues = [];
                    var i = this.multiple ? this.selectedValues : this.selectedValues[0] || "";
                    this.$ele.value = i, this.$hiddenInput.value = i, this.isMaxValuesSelected = !!(this.maxValues && this.maxValues <= this.selectedValues.length), this.setValueText(), r.toggleClass(this.$wrapper, "has-value", s.isNotEmpty(this.selectedValues)), r.toggleClass(this.$wrapper, "max-value-selected", this.isMaxValuesSelected), e && r.dispatchEvent(this.$ele, "change")
                }
            }, {
                key: "setValueText",
                value: function() {
                    var t = [],
                        e = [],
                        i = this.selectedValues,
                        o = i.length,
                        s = this.noOfDisplayValues,
                        n = 0,
                        l = this.isAllSelected && !this.hasServerSearch;
                    if (l && this.hideValueTooltipOnSelectAll) this.$valueText.innerHTML = "Tất cả (".concat(o, ")");
                    else {
                        var a, u = c(this.options);
                        try {
                            for (u.s(); !(a = u.n()).done;) {
                                var h = a.value;
                                if (!h.isCurrentNew) {
                                    if (n > 50) break;
                                    var p = h.value;
                                    if (-1 !== i.indexOf(p)) {
                                        var d = h.label;
                                        t.push(d), ++n <= s && e.push('<span class="vscomp-value-tag">'.concat(d, "</span>"))
                                    }
                                }
                            }
                        } catch (t) {
                            u.e(t)
                        } finally {
                            u.f()
                        }
                        var v = o - s;
                        v > 0 && e.push('<span class="vscomp-value-tag more-value-count">+ '.concat(v, " more...</span>"));
                        var f = t.join(", ");
                        if ("" === f) this.$valueText.innerHTML = this.placeholder;
                        else if (this.$valueText.innerHTML = f, this.multiple) {
                            var y = this.maxValues;
                            if (r.hasEllipsis(this.$valueText) || y) {
                                var g = "".concat(o);
                                y && (g += " / ".concat(y)), this.$valueText.innerHTML = l ? "All (".concat(o, ")") : "".concat(g, "").concat(1 === o ? "" : "", " lựa chọn")
                            } else e = []
                        }
                    }
                    r.setData(this.$valueText, "tooltip", e.join(", "))
                }
            }, {
                key: "setSearchValue",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    if (t !== this.searchValueOriginal || i) {
                        e || (this.$searchInput.value = t);
                        var o = t.replace(/\\/g, "").toLowerCase().trim();
                        this.searchValue = o, this.searchValueOriginal = t, r.toggleClass(this.$wrapper, "has-search-value", t), this.afterSetSearchValue()
                    }
                }
            }, {
                key: "setVisibleOptionsCount",
                value: function() {
                    var t, e = 0,
                        i = !1,
                        o = this.searchValue,
                        s = this.showOptionsOnlyOnSearch,
                        n = this.isOptionVisible.bind(this);
                    this.hasOptionGroup && (t = this.getVisibleOptionGroupsMapping(o)), this.options.forEach((function(l) {
                        var a;
                        l.isCurrentNew || (s && !o ? (l.isVisible = !1, a = {
                            isVisible: !1,
                            hasExactOption: !1
                        }) : a = n(l, o, i, t), a.isVisible && e++, i || (i = a.hasExactOption))
                    })), this.allowNewOption && (o && !i ? (this.setNewOption(), e++) : this.removeNewOption()), this.visibleOptionsCount = e, this.afterSetVisibleOptionsCount()
                }
            }, {
                key: "setOptionProp",
                value: function(t, e, i) {
                    this.options[t] && (this.options[t][e] = i)
                }
            }, {
                key: "setOptionsHeight",
                value: function() {
                    this.$optionsList.style.height = this.optionHeight * this.visibleOptionsCount + "px"
                }
            }, {
                key: "setOptionsContainerHeight",
                value: function(t) {
                    var e;
                    t ? this.showAsPopup && (this.optionsCount = this.getOptionsCount(), e = this.getOptionsHeight(), this.optionsHeight = e) : (e = this.optionsHeight, this.keepAlwaysOpen && (r.setStyle(this.$noOptions, "height", e), r.setStyle(this.$noSearchResults, "height", e))), r.setStyle(this.$optionsContainer, "max-height", e), this.afterSetOptionsContainerHeight(t)
                }
            }, {
                key: "setDropboxPosition",
                value: function() {
                    if ("auto" === this.position) {
                        var t = r.getMoreVisibleSides(this.$wrapper),
                            e = !1;
                        if (this.dropboxWidth) {
                            var i = this.$toggleButton.getBoundingClientRect(),
                                o = window.innerWidth,
                                s = parseFloat(this.dropboxWidth),
                                n = i.left + s > o,
                                l = s > i.right;
                            n && !l && (e = !0)
                        }
                        r.toggleClass(this.$wrapper, "position-top", "top" === t.vertical), r.toggleClass(this.$wrapper, "position-left", e)
                    }
                }
            }, {
                key: "setNewOption",
                value: function(t) {
                    var e = t || this.searchValueOriginal.trim();
                    if (e) {
                        var i = this.getNewOption();
                        if (i) {
                            var o = i.index;
                            this.setOptionProp(o, "value", e), this.setOptionProp(o, "label", e)
                        } else {
                            var s = {
                                value: e,
                                label: e
                            };
                            t ? (s.isNew = !0, this.newValues.push(e)) : s.isCurrentNew = !0, this.addOption(s)
                        }
                    }
                }
            }, {
                key: "setSelectedProp",
                value: function() {
                    var t = this.selectedValues;
                    this.options.forEach((function(e) {
                        -1 !== t.indexOf(e.value) && (e.isSelected = !0)
                    }))
                }
            }, {
                key: "setNewOptionsFromValue",
                value: function(t) {
                    if (t) {
                        var e = this.options.map((function(t) {
                                return t.value
                            })),
                            i = this.setNewOption.bind(this);
                        t.forEach((function(t) {
                            t && -1 === e.indexOf(t) && i(t)
                        }))
                    }
                }
            }, {
                key: "getVisibleOptions",
                value: function() {
                    return this.visibleOptions || []
                }
            }, {
                key: "getValue",
                value: function() {
                    return this.multiple ? this.selectedValues : this.selectedValues[0]
                }
            }, {
                key: "getFirstVisibleOptionIndex",
                value: function() {
                    return Math.ceil(this.$optionsContainer.scrollTop / this.optionHeight)
                }
            }, {
                key: "getVisibleStartIndex",
                value: function() {
                    var t = this.getFirstVisibleOptionIndex() - this.halfOptionsCount;
                    return t < 0 && (t = 0), t
                }
            }, {
                key: "getTooltipAttrText",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                        i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
                        o = {
                            "data-tooltip": t || "",
                            "data-tooltip-enter-delay": this.tooltipEnterDelay,
                            "data-tooltip-z-index": this.zIndex,
                            "data-tooltip-font-size": this.tooltipFontSize,
                            "data-tooltip-alignment": this.tooltipAlignment,
                            "data-tooltip-max-width": this.tooltipMaxWidth,
                            "data-tooltip-ellipsis-only": e,
                            "data-tooltip-allow-html": i
                        };
                    return r.getAttributesText(o)
                }
            }, {
                key: "getOptionObj",
                value: function(t) {
                    if (t) {
                        var e = s.getString;
                        return {
                            index: t.index,
                            value: e(t.value),
                            label: e(t.label),
                            description: e(t.description),
                            alias: this.getAlias(t.alias),
                            isCurrentNew: t.isCurrentNew || !1,
                            isNew: t.isNew || !1,
                            isVisible: !0
                        }
                    }
                }
            }, {
                key: "getNewOption",
                value: function() {
                    var t = this.options[this.lastOptionIndex];
                    if (t && t.isCurrentNew) return t
                }
            }, {
                key: "getOptionIndex",
                value: function(t) {
                    var e;
                    return t && this.options.some((function(i) {
                        if (i.value == t) return e = i.index, !0
                    })), e
                }
            }, {
                key: "getNewValue",
                value: function() {
                    var t = this.newValues,
                        e = this.selectedValues.filter((function(e) {
                            return -1 !== t.indexOf(e)
                        }));
                    return this.multiple ? e : e[0]
                }
            }, {
                key: "getAlias",
                value: function(t) {
                    return t = t ? (t = Array.isArray(t) ? t.join(",") : t.toString().trim()).toLowerCase() : ""
                }
            }, {
                key: "getDisplayValue",
                value: function() {
                    var t, e = [],
                        i = this.selectedValues,
                        o = c(this.options);
                    try {
                        for (o.s(); !(t = o.n()).done;) {
                            var s = t.value; - 1 !== i.indexOf(s.value) && e.push(s.label)
                        }
                    } catch (t) {
                        o.e(t)
                    } finally {
                        o.f()
                    }
                    return this.multiple ? e : e[0] || ""
                }
            }, {
                key: "getSelectedOptions",
                value: function() {
                    var t = this.selectedValues,
                        e = [],
                        i = this.valueKey,
                        o = this.labelKey;
                    return this.options.forEach((function(s) {
                        if (-1 !== t.indexOf(s.value)) {
                            var n, l = (u(n = {}, i, s.value), u(n, o, s.label), n);
                            s.isNew && (l.isNew = !0), e.push(l)
                        }
                    })), this.multiple ? e : e[0]
                }
            }, {
                key: "getVisibleOptionGroupsMapping",
                value: function(t) {
                    var e = this.options,
                        i = {},
                        o = this.isOptionVisible;
                    return (e = this.structureOptionGroup(e)).forEach((function(e) {
                        i[e.index] = e.options.some((function(e) {
                            return o(e, t).isVisible
                        }))
                    })), i
                }
            }, {
                key: "getOptionsCount",
                value: function(t) {
                    if (this.showAsPopup) {
                        var e = 80 * window.innerHeight / 100 - 48;
                        this.hasSearchContainer && (e -= 40), t = Math.floor(e / this.optionHeight)
                    } else t = parseInt(t);
                    return t
                }
            }, {
                key: "getOptionsHeight",
                value: function() {
                    return this.optionsCount * this.optionHeight + "px"
                }
            }, {
                key: "getSibling",
                value: function(t, e) {
                    var i = "next" === e ? "nextElementSibling" : "previousElementSibling";
                    do {
                        t && (t = t[i])
                    } while (r.hasClass(t, "disabled") || r.hasClass(t, "group-title"));
                    return t
                }
            }, {
                key: "openDropbox",
                value: function(t) {
                    var e = this;
                    this.setDropboxPosition(), r.removeClass(this.$wrapper, "closed"), setTimeout((function() {
                        r.addClass(e.$wrapper, "opened"), t || (e.moveSelectedOptionsFirst(), r.addClass(e.$wrapper, "focused"), e.showAsPopup ? (r.addClass(e.$body, "vscomp-popup-active"), e.isPopupActive = !0) : e.focusSearchInput())
                    }), 0)
                }
            }, {
                key: "closeDropbox",
                value: function(t) {
                    var e = this;
                    if (this.keepAlwaysOpen) this.removeOptionFocus();
                    else {
                        var i = t ? 0 : this.transitionDuration;
                        setTimeout((function() {
                            r.removeClass(e.$wrapper, "opened focused"), e.removeOptionFocus(), t || e.isPopupActive && (r.removeClass(e.$body, "vscomp-popup-active"), e.isPopupActive = !1)
                        }), 0), setTimeout((function() {
                            r.addClass(e.$wrapper, "closed")
                        }), i)
                    }
                }
            }, {
                key: "moveSelectedOptionsFirst",
                value: function() {
                    this.showSelectedOptionsFirst && (this.setSortedOptions(), this.$optionsContainer.scrollTop && this.selectedValues.length ? this.scrollToTop() : this.setVisibleOptions())
                }
            }, {
                key: "toggleDropbox",
                value: function() {
                    this.isOpened() ? this.closeDropbox() : this.openDropbox()
                }
            }, {
                key: "isOpened",
                value: function() {
                    return r.hasClass(this.$wrapper, "opened")
                }
            }, {
                key: "focusSearchInput",
                value: function() {
                    var t = this.$searchInput;
                    t && t.focus()
                }
            }, {
                key: "focusOption",
                value: function(t, e) {
                    var i, o = this.$dropboxContainer.querySelector(".vscomp-option.focused");
                    if (e) i = e;
                    else if (o) i = this.getSibling(o, t);
                    else {
                        var s = this.getFirstVisibleOptionIndex();
                        i = this.$dropboxContainer.querySelector('.vscomp-option[data-visible-index="'.concat(s, '"]')), (r.hasClass(i, "disabled") || r.hasClass(i, "group-title")) && (i = this.getSibling(i, "next"))
                    }
                    i && i !== o && (o && r.removeClass(o, "focused"), r.addClass(i, "focused"), this.toggleFocusedProp(r.getData(i, "index"), !0), this.moveFocusedOptionToView(i))
                }
            }, {
                key: "moveFocusedOptionToView",
                value: function(t) {
                    if (t || (t = this.$dropboxContainer.querySelector(".vscomp-option.focused")), t) {
                        var e, i = this.$optionsContainer.getBoundingClientRect(),
                            o = t.getBoundingClientRect(),
                            s = i.top,
                            n = i.bottom,
                            l = i.height,
                            a = o.top,
                            u = o.bottom,
                            c = o.height,
                            h = t.offsetTop,
                            p = r.getData(this.$options, "top", "number");
                        s > a ? e = h + p : n < u && (e = h - l + c + p), void 0 !== e && (this.$optionsContainer.scrollTop = e)
                    }
                }
            }, {
                key: "removeOptionFocus",
                value: function() {
                    var t = this.$dropboxContainer.querySelector(".vscomp-option.focused");
                    t && (r.removeClass(t, "focused"), this.toggleFocusedProp(null))
                }
            }, {
                key: "selectOption",
                value: function(t) {
                    if (t) {
                        var e = !r.hasClass(t, "selected");
                        if (e) {
                            if (this.multiple && this.isMaxValuesSelected) return
                        } else if (!this.multiple) return void this.closeDropbox();
                        var i = this.selectedValues,
                            o = r.getData(t, "value"),
                            n = r.getData(t, "index");
                        if (this.toggleSelectedProp(n, e), e) {
                            if (this.multiple) i.push(o), this.toggleAllOptionsClass();
                            else {
                                i.length && this.toggleSelectedProp(this.getOptionIndex(i[0]), !1), i = [o];
                                var l = this.$ele.querySelector(".vscomp-option.selected");
                                l && r.toggleClass(l, "selected", !1), this.closeDropbox()
                            }
                            r.toggleClass(t, "selected")
                        } else this.multiple && (r.toggleClass(t, "selected"), s.removeItemFromArray(i, o), this.toggleAllOptionsClass(!1));
                        r.hasClass(t, "current-new") && this.beforeSelectNewValue(), this.setValue(i, !0)
                    }
                }
            }, {
                key: "selectFocusedOption",
                value: function() {
                    this.selectOption(this.$dropboxContainer.querySelector(".vscomp-option.focused"))
                }
            }, {
                key: "toggleAllOptions",
                value: function(t) {
                    if (this.multiple && !this.disableSelectAll) {
                        "boolean" != typeof t && (t = !r.hasClass(this.$toggleAllCheckbox, "checked"));
                        var e = [];
                        this.options.forEach((function(i) {
                            i.isDisabled || i.isCurrentNew || i.isGroupTitle || (i.isSelected = t, t && e.push(i.value))
                        })), this.toggleAllOptionsClass(t), this.setValue(e, !0), this.renderOptions()
                    }
                }
            }, {
                key: "toggleAllOptionsClass",
                value: function(t) {
                    this.multiple && ("boolean" != typeof t && (t = !1, this.options.length && (t = !this.options.some((function(t) {
                        return !t.isSelected && !t.isDisabled && !t.isGroupTitle
                    })))), r.toggleClass(this.$toggleAllCheckbox, "checked", t), this.isAllSelected = t)
                }
            }, {
                key: "toggleFocusedProp",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    this.focusedOptionIndex && this.setOptionProp(this.focusedOptionIndex, "isFocused", !1), this.setOptionProp(t, "isFocused", e), this.focusedOptionIndex = t
                }
            }, {
                key: "toggleSelectedProp",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    this.setOptionProp(t, "isSelected", e)
                }
            }, {
                key: "scrollToTop",
                value: function() {
                    var t = !this.isOpened();
                    t && this.openDropbox(!0), this.$optionsContainer.scrollTop > 0 && (this.$optionsContainer.scrollTop = 0), t && this.closeDropbox(!0)
                }
            }, {
                key: "reset",
                value: function() {
                    this.options.forEach((function(t) {
                        t.isSelected = !1
                    })), this.beforeValueSet(!0), this.setValue(null, !0), this.afterValueSet()
                }
            }, {
                key: "addOption",
                value: function(t, e) {
                    if (t) {
                        this.lastOptionIndex++, t.index = this.lastOptionIndex;
                        var i = this.getOptionObj(t);
                        this.options.push(i), this.sortedOptions.push(i), e && (this.visibleOptionsCount++, this.afterSetOptions())
                    }
                }
            }, {
                key: "removeOption",
                value: function(t) {
                    (t || 0 == t) && (this.options.splice(t, 1), this.lastOptionIndex--)
                }
            }, {
                key: "removeNewOption",
                value: function() {
                    var t = this.getNewOption();
                    t && this.removeOption(t.index)
                }
            }, {
                key: "sortOptions",
                value: function(t) {
                    return t.sort((function(t, e) {
                        return t.isSelected || e.isSelected ? t.isSelected && (!e.isSelected || t.index < e.index) ? -1 : 1 : 0
                    }))
                }
            }, {
                key: "sortOptionsGroup",
                value: function(t) {
                    var e = this.sortOptions;
                    return (t = this.structureOptionGroup(t)).forEach((function(t) {
                        var i = t.options;
                        t.isSelected = i.some((function(t) {
                            return t.isSelected
                        })), t.isSelected && e(i)
                    })), e(t), this.destructureOptionGroup(t)
                }
            }, {
                key: "isOptionVisible",
                value: function(t, e, i, o) {
                    var s = t.label.toLowerCase(),
                        n = t.description,
                        l = t.alias,
                        a = -1 !== s.indexOf(e);
                    return t.isGroupTitle && (a = o[t.index]), l && !a && (a = -1 !== l.indexOf(e)), n && !a && (a = -1 !== n.toLowerCase().indexOf(e)), t.isVisible = a, i || (i = s === e), {
                        isVisible: a,
                        hasExactOption: i
                    }
                }
            }, {
                key: "structureOptionGroup",
                value: function(t) {
                    var e = [],
                        i = {};
                    return t.forEach((function(t) {
                        if (t.isGroupTitle) {
                            var o = [];
                            t.options = o, i[t.index] = o, e.push(t)
                        }
                    })), t.forEach((function(t) {
                        t.isGroupOption && i[t.groupIndex].push(t)
                    })), e
                }
            }, {
                key: "destructureOptionGroup",
                value: function(t) {
                    var e = [];
                    return t.forEach((function(t) {
                        e.push(t), e = e.concat(t.options)
                    })), e
                }
            }, {
                key: "serverSearch",
                value: function() {
                    r.removeClass(this.$wrapper, "has-no-search-results"), r.addClass(this.$wrapper, "server-searching"), this.setSelectedOptions(), this.onServerSearch(this.searchValue, this)
                }
            }]) && v(e.prototype, i), o && v(e, o), t
        }();
    document.addEventListener("reset", y.resetForm), window.addEventListener("resize", y.onResizeMethod), window.VirtualSelect = y
}();